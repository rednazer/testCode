;; The stack will push the current address of execution into the stack frame
;; As well as X registers
;; Let's assume X = 10
;; (10 reg + 1 addr) * 8 bytes per = 0x58
; stack pointer = r30
; link register = r31

;; This will call another method and push current PC and register values onto the stack
; Use this when calling another function
%macro push_stack_caller(label jumpto_label)
	jal jumpto_label
%endmacro

; Use at the start of a called function
%macro push_stack_callee()
	subi r30, r30, 0x58
	st36 [r30+0x00], r1
	st36 [r30+0x08], r2
	st36 [r30+0x10], r3
	st36 [r30+0x18], r4
	st36 [r30+0x20], r5
	st36 [r30+0x28], r6 
	st36 [r30+0x30], r7
	st36 [r30+0x38], r8
	st36 [r30+0x40], r9
	st36 [r30+0x48], r10
	st36 [r30+0x50], r31
%endmacro


;; this will return from the current method pull the last stored PC and register vals
;; This may require a Reg to store a return value into (or not)
; Use this to return from a function call
%macro pop_stack()
	ld36 r1, [r30+0x00]
	ld36 r2, [r30+0x08]
	ld36 r3, [r30+0x10]
	ld36 r4, [r30+0x18]
	ld36 r5, [r30+0x20]
	ld36 r6, [r30+0x28]
	ld36 r7, [r30+0x30]
	ld36 r8, [r30+0x38]
	ld36 r9, [r30+0x40]
	ld36 r10, [r30+0x48]
	ld36 r31, [r30+0x50]
	ld36 r31, [r30+0x50]
	addi r30, r30, +0x58
	jmpr r31
%endmacro


;; This will pull in the register values from the caller method and put them into the regs.
;; This shouldn't require any vars
%macro peek_stack()
	ld36 r1, [r30+0x00]
	ld36 r2, [r30+0x08]
	ld36 r3, [r30+0x10]
	ld36 r4, [r30+0x18]
	ld36 r5, [r30+0x20]
	ld36 r6, [r30+0x28]
	ld36 r7, [r30+0x30]
	ld36 r8, [r30+0x38]
	ld36 r9, [r30+0x40]
	ld36 r10, [r30+0x48]
%endmacro



















	
	RISC-V clang rv32XXX 15.0
	r31 - link reg
	r30 - stack reg
	