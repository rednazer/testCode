; Setup regs
lil r1, 0x1000
lil r2, 0x3000
lil r3, 0x5000
lil r4, 0x7000
lil r5, 7
lil r6, 1
lil r30, 0x7000

lil r10, 0x0000
lih r10, 0x0FE0		; the number 1 in floating point
lil r12, 0x00
lih r12, 0x00
vsplat 0b1111, v20, r12 ; Zeros
vsplat 0b1111, v21, r12
vsplat 0b1000, v21, r10	; Middle with 1

lih r13, 0x00
lil r13, 0x10
; Use r11
fill_weights:
	mul r15, r11, r13
	add r15, r4, r15		; filter location
	vsti 0b1111, [r15+=0x10], v20
	vsti 0b1111, [r15+=0x10], v21
	vsti 0b1111, [r15+=0x10], v20
	vsti 0b1111, [r15+=0x10], v20
	
addi r11, r11, 0x01
cmp r11, r6; # r11 < num filters
blzi layer_loop

lil r11, 0x00
lil r13, 0x00
lil r14, 0x20
fill_matrix:
	;vsplat 0b1111, v21, r12
	
	addi r13, r13, 0x01
	vsplat 0b0001, v21, r13
	addi r13, r13, 0x01
	vsplat 0b0010, v21, r13
	addi r13, r13, 0x01
	vsplat 0b0100, v21, r13
	addi r13, r13, 0x01
	vsplat 0b1000, v21, r13
	
	mul r15, r11, r14
	add r15, r15, r1
	vstr 0b1111, [r15+=0x10], v21
	
	addi r13, r13, 0x01
	vsplat 0b0001, v21, r13
	addi r13, r13, 0x01
	vsplat 0b0010, v21, r13
	addi r13, r13, 0x01
	vsplat 0b0100, v21, r13
	vsplat 0b0001, v21, r12
	vstr 0b1111, [r15+=0x10], v21
	
addi r11, r11, 0x01
cmp r11, r5
blzi fill_matrix

; call function
bkpt 0x01
jal depthwise_convolution_stride1
bkpt 0x0a
halt

;; Information we need
; r1 = Input_matrix (also output of current)		- location 1
; r2 = Output location for padded matrix			- location 2
; r3 = Output location for im2col					- location 3
; r4 = Filter input location						- location 4
; r5 = width of matrix (x and y)
; r6 = depth of matrix (z) (number of filters)
depthwise_convolution_stride1:
	; Stack stuff
	subi r30, r30, 0x58
	st36 [r30+0x00], r1
	st36 [r30+0x08], r2
	st36 [r30+0x10], r3
	st36 [r30+0x18], r4
	st36 [r30+0x20], r5
	st36 [r30+0x28], r6 
	st36 [r30+0x30], r7
	st36 [r30+0x38], r8
	st36 [r30+0x40], r9
	st36 [r30+0x48], r10
	st36 [r30+0x50], r31
	
	;; Pad matrix
	; r1 = Location 1 (input)
	; r2 = Location 2 (ouptut)
	; r3 = width (x and y length)
	; r4 = depth (z length)
	; Reorganizes Registers for Padding
	; r1 <= r1; r2 <= r2; r3 <= r5; r4 <= r6
	and r3, r5, r5
	and r4, r6, r6
	
	; pad the matrix
	; push_stack_caller(padMatrix)
	jal padMatrix
	bkpt 0x02
	
	;; For loop iterating through each z layer
	lih r9, 0x0000
	lil r9, 0x0000		; Z loop var
	
	layer_loop:
		;; im2col (stride 2 2d)
		; r1 = Location 2 + ( ((width+2+3)>>2<<2) * (width+2) * (curr depth) * FLOAT_SIZE)
		; r2 = Location 3 + ( (width^2+7)>>3<<5 * 9 * (curr depth) ;FloatSizeBakedInto<<4) (output)
		; r3 = width (x and y) - pad matrix (width + 2)
		; r4 = num im2col columns (per row)- this is calculated from width (width + 2 - 2)
		;peek_stack()
		ld36 r1, [r30+0x00]
		ld36 r2, [r30+0x08]
		ld36 r3, [r30+0x10]
		ld36 r4, [r30+0x18]
		ld36 r5, [r30+0x20]
		ld36 r6, [r30+0x28]
		
		addi r12, r5, 0x05
		shri r12, r12, 0x02
		shli r12, r12, 0x02
		addi r13, r5, 0x02
		mul r12, r12, r13
		mul r12, r12, r9
		shli r12, r12, 0x02			; r1 offset
		
		mul r15, r5, r5
		addi r15, r15, 0x07
		shri r15, r15, 0x03
		shli r15, r15, 0x05
		lih r14, 0x00
		lil r14, 0x09
		mul r15, r15, r14
		mul r15, r15, r9			; r2 offset
		
		add r1, r2, r12
		add r2, r3, r15
		addi r3, r5, 0x02
		addi r4, r5, 0x00
		
		; CALL IM2COL
		jal imTwoColStrideOneTwoD
		bkpt 0x03
		
		;; MatMul
		; r1 = Location 4 + 16 * (curr depth) * FLOAT_SIZE (Input)
		; r2 = Location 3 + ( (width^2+3)>>2<<4 * 9 * (curr depth) ;FloatSizeBakedInto<<4) (input)
		; r3 = Location 1 + (width+3)>>2<<2 * (width) * (curr depth) * FLOAT_SIZE (Output)
		; r4 = width of matrix - common length (3x3 for filter size)
		; r5 = # cols for r1 (A matrix) - number of filters
		; r6 = # rows in r2 (B matrix) - number of im2col columns
		;peek_stack()
		ld36 r1, [r30+0x00]
		ld36 r2, [r30+0x08]
		ld36 r3, [r30+0x10]
		ld36 r4, [r30+0x18]
		ld36 r5, [r30+0x20]
		ld36 r6, [r30+0x28]
		
		lih r12, 0x00
		lil r12, 0x10
		mul r12, r12, r9
		shli r12, r12, 0x02			; r1 offset
		
		mul r13, r5, r5
		addi r13, r13, 0x03
		shri r13, r13, 0x02
		shli r13, r13, 0x02			; r6
		shli r14, r13, 0x02
		lih r16, 0x00
		lil r16, 0x09
		mul r14, r14, r16
		mul r14, r14, r9			; r2 offset
		
		addi r15, r5, 0x03
		shri r15, r15, 0x02
		shli r15, r15, 0x02
		mul r15, r15, r5
		mul r15, r15, r9
		shli r15, r15, 0x02			; r3 offset
		
		add r2, r3, r14
		add r3, r1, r15
		add r1, r4, r12
		addi r4, r16, 0x00
		lih r5, 0x00
		lil r5, 0x01		; r5 = 1 because depthwise
		addi r6, r13, 0x00
		
		; CALL MATMUL
		jal matmulmodule
		bkpt 0x04
		
	;; Check loop condition
	; branch if r9 < r6 (r9-r6<0)
	addi r9, r9, 0x01
	cmp r9, r6
	blzi layer_loop
	
	; Return to caller function
	ld36 r1, [r30+0x00]
	ld36 r2, [r30+0x08]
	ld36 r3, [r30+0x10]
	ld36 r4, [r30+0x18]
	ld36 r5, [r30+0x20]
	ld36 r6, [r30+0x28]
	ld36 r7, [r30+0x30]
	ld36 r8, [r30+0x38]
	ld36 r9, [r30+0x40]
	ld36 r10, [r30+0x48]
	ld36 r31, [r30+0x50]
	ld36 r31, [r30+0x50]
	addi r30, r30, 0x58
	jmpr r31, 0x00
	halt

; Include needed subfiles
%include "padding_code.txt"
%include "im2ColStrideOne_code.txt"
%include "matmul.txt"
